openapi: 3.0.0
info:
  title: Pait Doc
  version: 0.0.1
servers:
- url: http://127.0.0.1
tags: []
paths:
  /api/raise_tip:
    post:
      deprecated: true
      summary: test pait raise tip
      parameters:
      - name: content__type
        in: header
        required: true
        description: Content-Type
        schema:
          title: Content  Type
          description: Content-Type
          type: string
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              title: DynamicFoobarModel
              type: object
              properties:
                uid:
                  title: Uid
                  exclusiveMinimum: 10
                  exclusiveMaximum: 1000
                  type: integer
                user_name:
                  title: User Name
                  minLength: 2
                  maxLength: 4
                  type: string
                age:
                  title: Age
                  exclusiveMinimum: 1
                  exclusiveMaximum: 100
                  type: integer
              required:
              - uid
              - user_name
              - age
    options:
      deprecated: true
      summary: test pait raise tip
      parameters:
      - name: content__type
        in: header
        required: true
        description: Content-Type
        schema:
          title: Content  Type
          description: Content-Type
          type: string
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              title: DynamicFoobarModel
              type: object
              properties:
                uid:
                  title: Uid
                  exclusiveMinimum: 10
                  exclusiveMaximum: 1000
                  type: integer
                user_name:
                  title: User Name
                  minLength: 2
                  maxLength: 4
                  type: string
                age:
                  title: Age
                  exclusiveMinimum: 1
                  exclusiveMaximum: 100
                  type: integer
              required:
              - uid
              - user_name
              - age
  /api/pait_model:
    get:
      summary: Test Field
      parameters:
      - name: uid
        in: query
        required: true
        description: user id
        schema: &id001
          title: Uid
          description: user id
          exclusiveMinimum: 10
          exclusiveMaximum: 1000
          type: integer
      - name: user_name
        in: query
        required: true
        description: user name
        schema: &id002
          title: User Name
          description: user name
          minLength: 2
          maxLength: 4
          type: string
      - name: user-agent
        in: header
        required: true
        description: user agent
        schema: &id003
          title: User-Agent
          description: user agent
          type: string
      responses: {}
    options:
      summary: Test Field
      parameters:
      - name: uid
        in: query
        required: true
        description: user id
        schema: *id001
      - name: user_name
        in: query
        required: true
        description: user name
        schema: *id002
      - name: user-agent
        in: header
        required: true
        description: user agent
        schema: *id003
      responses: {}
    head:
      summary: Test Field
      parameters:
      - name: uid
        in: query
        required: true
        description: user id
        schema: *id001
      - name: user_name
        in: query
        required: true
        description: user name
        schema: *id002
      - name: user-agent
        in: header
        required: true
        description: user agent
        schema: *id003
      responses: {}
  /api/post:
    post:
      summary: Test Method:Post Pydantic Model
      parameters:
      - name: requestBody.content.<media-type>
        in: header
        required: true
        description: Content-Type
        schema:
          title: Content-Type
          description: Content-Type
          type: string
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              title: DynamicFoobarModel
              type: object
              properties:
                uid:
                  title: Uid
                  exclusiveMinimum: 10
                  exclusiveMaximum: 1000
                  type: integer
                user_name:
                  title: User Name
                  minLength: 2
                  maxLength: 4
                  type: string
                age:
                  title: Age
                  exclusiveMinimum: 1
                  exclusiveMaximum: 100
                  type: integer
              required:
              - uid
              - user_name
              - age
    options:
      summary: Test Method:Post Pydantic Model
      parameters:
      - name: requestBody.content.<media-type>
        in: header
        required: true
        description: Content-Type
        schema:
          title: Content-Type
          description: Content-Type
          type: string
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              title: DynamicFoobarModel
              type: object
              properties:
                uid:
                  title: Uid
                  exclusiveMinimum: 10
                  exclusiveMaximum: 1000
                  type: integer
                user_name:
                  title: User Name
                  minLength: 2
                  maxLength: 4
                  type: string
                age:
                  title: Age
                  exclusiveMinimum: 1
                  exclusiveMaximum: 100
                  type: integer
              required:
              - uid
              - user_name
              - age
  /api/depend:
    get:
      summary: Test Method:Post request, Pydantic Model
      parameters:
      - name: uid
        in: query
        required: false
        description: user id
        schema: &id004
          title: Uid
          description: user id
          default: 123456
          exclusiveMinimum: 10
          exclusiveMaximum: 1000
          type: integer
      - name: user_name
        in: query
        required: true
        description: user name
        schema: &id005
          title: User Name
          description: user name
          minLength: 2
          maxLength: 4
          type: string
      - name: age
        in: query
        required: true
        description: age
        schema: &id006
          title: Age
          description: age
          exclusiveMinimum: 1
          exclusiveMaximum: 100
          type: integer
      - name: user-agent
        in: header
        required: true
        description: user agent
        schema:
          title: User-Agent
          description: user agent
          type: string
      responses: {}
    options:
      summary: Test Method:Post request, Pydantic Model
      parameters:
      - name: uid
        in: query
        required: false
        description: user id
        schema: *id004
      - name: user_name
        in: query
        required: true
        description: user name
        schema: *id005
      - name: age
        in: query
        required: true
        description: age
        schema: *id006
      - name: user-agent
        in: header
        required: true
        description: user agent
        schema:
          title: User-Agent
          description: user agent
          type: string
      responses: {}
    head:
      summary: Test Method:Post request, Pydantic Model
      parameters:
      - name: uid
        in: query
        required: false
        description: user id
        schema: *id004
      - name: user_name
        in: query
        required: true
        description: user name
        schema: *id005
      - name: age
        in: query
        required: true
        description: age
        schema: *id006
      - name: user-agent
        in: header
        required: true
        description: user agent
        schema:
          title: User-Agent
          description: user agent
          type: string
      responses: {}
  /api/get/<age>:
    get:
      summary: Test Field
      parameters:
      - name: sex
        in: query
        required: false
        description: null
        schema:
          title: SexEnum
          description: An enumeration.
          enum:
          - man
          - woman
      - name: age
        in: path
        required: true
        description: null
        schema:
          title: Age
          type: string
      responses: {}
    options:
      summary: Test Field
      parameters:
      - name: sex
        in: query
        required: false
        description: null
        schema:
          title: SexEnum
          description: An enumeration.
          enum:
          - man
          - woman
      - name: age
        in: path
        required: true
        description: null
        schema:
          title: Age
          type: string
      responses: {}
    head:
      summary: Test Field
      parameters:
      - name: sex
        in: query
        required: false
        description: null
        schema:
          title: SexEnum
          description: An enumeration.
          enum:
          - man
          - woman
      - name: age
        in: path
        required: true
        description: null
        schema:
          title: Age
          type: string
      responses: {}
  /api/cbv:
    get:
      summary: Text Pydantic Model and Field
      parameters:
      - name: age
        in: query
        required: true
        description: age
        schema: *id006
      - name: email
        in: query
        required: false
        description: email
        schema:
          title: Email
          description: email
          default: example@xxx.com
          type: string
      - name: user-agent
        in: header
        required: true
        description: ua
        schema:
          title: User-Agent
          description: ua
          type: string
      responses: {}
    post:
      summary: test cbv post method
      parameters:
      - name: user-agent
        in: header
        required: true
        description: ua
        schema:
          title: User-Agent
          description: ua
          type: string
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              title: DynamicFoobarModel
              type: object
              properties:
                uid:
                  title: Uid
                  exclusiveMinimum: 10
                  exclusiveMaximum: 1000
                  type: integer
                user_name:
                  title: User Name
                  minLength: 2
                  maxLength: 4
                  type: string
                age:
                  title: Age
                  exclusiveMinimum: 1
                  exclusiveMaximum: 100
                  type: integer
              required:
              - uid
              - user_name
              - age
components:
  schemas: {}
